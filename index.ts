// Generated by CoffeeScript 1.12.7
var UnicodeTrieBuilder, bidiMirrorBits, bits, categories, category, categoryBits, categoryCount, categoryShift, codePoint, codePoints, combiningClass, combiningClassBits, combiningClassCount, combiningClasses, combiningShift, eaw, eawBits, eawCount, eawShift, eaws, fs, i, j, len, len1, log2, name, name1, name2, name3, numberBits, numericValue, script, scriptBits, scriptCount, scriptShift, scripts, trie, val;

codePoints = require('codepoints');

fs = require('fs');

UnicodeTrieBuilder = require('unicode-trie/builder');

log2 = Math.log2 || function(n) {
  return Math.log(n) / Math.LN2;
};

bits = function(n) {
  return (log2(n) + 1) | 0;
};

categories = {};

combiningClasses = {};

scripts = {};

eaws = {};

categoryCount = 0;

combiningClassCount = 0;

scriptCount = 0;

eawCount = 0;

for (i = 0, len = codePoints.length; i < len; i++) {
  codePoint = codePoints[i];
  if (!(codePoint != null)) {
    continue;
  }
  if (categories[name = codePoint.category] == null) {
    categories[name] = categoryCount++;
  }
  if (combiningClasses[name1 = codePoint.combiningClassName] == null) {
    combiningClasses[name1] = combiningClassCount++;
  }
  if (scripts[name2 = codePoint.script] == null) {
    scripts[name2] = scriptCount++;
  }
  if (eaws[name3 = codePoint.eastAsianWidth] == null) {
    eaws[name3] = eawCount++;
  }
}

numberBits = 10;

categoryBits = bits(categoryCount - 1);

combiningClassBits = bits(combiningClassCount - 1);

bidiMirrorBits = 1;

scriptBits = bits(scriptCount - 1);

eawBits = bits(eawCount - 1);

categoryShift = combiningClassBits + scriptBits + eawBits + numberBits;

combiningShift = scriptBits + eawBits + numberBits;

scriptShift = eawBits + numberBits;

eawShift = numberBits;

numericValue = function(numeric) {
  var den, exp, m, mant, num, val;
  if (numeric) {
    if (m = numeric.match(/^(\-?\d+)\/(\d+)$/)) {
      num = parseInt(m[1]);
      den = parseInt(m[2]);
      return ((num + 12) << 4) + (den - 1);
    } else if (/^\d0+$/.test(numeric)) {
      mant = parseInt(numeric[0]);
      exp = numeric.length - 1;
      return ((mant + 14) << 5) + (exp - 2);
    } else {
      val = parseInt(numeric);
      if (val <= 50) {
        return 1 + val;
      } else {
        mant = val;
        exp = 0;
        while ((mant % 60) === 0) {
          mant /= 60;
          ++exp;
        }
        return ((mant + 0xbf) << 2) + (exp - 1);
      }
    }
  } else {
    return 0;
  }
};

trie = new UnicodeTrieBuilder;

for (j = 0, len1 = codePoints.length; j < len1; j++) {
  codePoint = codePoints[j];
  if (!(codePoint != null)) {
    continue;
  }
  category = categories[codePoint.category];
  combiningClass = combiningClasses[codePoint.combiningClassName] || 0;
  script = scripts[codePoint.script] || 0;
  eaw = eaws[codePoint.eastAsianWidth] || 0;
  val = (category << categoryShift) | (combiningClass << combiningShift) | (script << scriptShift) | (eaw << eawShift) | numericValue(codePoint.numeric);
  trie.set(codePoint.code, val);
}

fs.writeFileSync('trie.json', JSON.stringify(trie.toBuffer()));

fs.writeFileSync('data.json', JSON.stringify({
  categories: Object.keys(categories),
  combiningClasses: Object.keys(combiningClasses),
  scripts: Object.keys(scripts),
  eaw: Object.keys(eaws)
}));
